apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  description: Creates a Infra Monitoring Setup with Prometheus and Grafana
  name: eks-observability-oss-infra-mon
  title: EKS Observability - OSS Infra Monitoring
spec:
  owner: guest
  type: service
  parameters:
    - properties:
        tfVars:
          properties:
            aws_region:
              description: AWS Region
              type: string
            eks_cluster_id:
              default: eks-cluster-with-vpc
              description: Name of the EKS cluster
              type: string
            enable_dashboards:
              default: true
              description: Enables or disables curated dashboards. Dashboards are managed by the Grafana Operator
              type: boolean
            grafana_api_key:
              description: API key for authorizing the Grafana provider to make changes to Amazon Managed Grafana
              type: string
            managed_grafana_workspace_id:
              description: Amazon Managed Grafana Workspace ID
              type: string
            managed_prometheus_workspace_id:
              default: ""
              description: Amazon Managed Service for Prometheus Workspace ID
              type: string
          required:
            - grafana_api_key
            - aws_region
            - managed_grafana_workspace_id
          title: Terraform variables
          type: object
        adminRoleName:
          default: Admin
          description: Name of the role to give the administrative rights on the EKS cluster.
          title: Admin Role Name
          type: string
        name:
          title: name of this entry
          type: string
        namespace:
          default: flux-system
          title: namespace within the kubernetes cluster to deploy this
          type: string
      title: Configuration Options
  steps:
    - action: fetch:template
      id: fetch-base
      input:
        url: ./templates-infra-monitoring/
        values:
          adminRoleName: ${{parameters.adminRoleName}}
          clusterName: ${{ parameters.clusterName }}
          name: ${{ parameters.name }}
          namespace: ${{ parameters.namespace }}
          tfVars: ${{ parameters.tfVars }}
      name: Fetch Base
    - id: publish
      name: Publishing to a gitea git repository
      action: publish:gitea
      input:
        description: Example EKS Observability Accelerator demo
        # Hard coded value for this demo purposes only.
        repoUrl: cnoe.localtest.me:8443/gitea?repo=${{parameters.name}}
        defaultBranch: main
    - id: create-argocd-app
      name: Create ArgoCD App
      action: cnoe:create-argocd-app
      input:
        appName: ${{parameters.name}}
        appNamespace: ${{parameters.namespace}}
        argoInstance: in-cluster
        projectName: default
        # necessary until we generate our own cert
        repoUrl: http://my-gitea-http.gitea.svc.cluster.local:3000/giteaAdmin/${{parameters.name}}
        path: "manifests"
    - id: register
      name: Register
      action: catalog:register
      input:
        repoContentsUrl: ${{ steps['publish'].output.repoContentsUrl }}
        catalogInfoPath: 'catalog-info.yaml'
  output:
    links:
      - title: Open in catalog
        icon: catalog
        entityRef: ${{ steps['register'].output.entityRef }}
